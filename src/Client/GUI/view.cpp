#include "view.hpp"
#include "../Gothic/Classes/zCView.hpp"
#include "../Gothic/Classes/zCOption.hpp"
#include "../Gothic/Classes/zCOptionSection.hpp"
#include "../Gothic/Classes/zCOptionEntry.hpp"

using namespace OpenGMP::GUI;

const std::map<View::Fonts, std::string> View::fontDict =
    {   { Default, "Font_Old_10_White.tga" },
        { Default_Hi, "Font_Old_10_White_Hi.tga" },
        { Menu, "Font_Old_20_White.tga" },
        { Menu_Hi, "Font_Old_20_White_Hi.tga" }
    };

std::vector<double> View::charWidths = InitCharWidths();

const std::map<char, double> View::allChars = { 
{ 'A', 14.998571428571428571428571428571 }, { 'B', 11.998857142857142857142857142857 }, { 'C', 10.998857142857142857142857142857 }, { 'D', 11.998857142857142857142857142857 }, { 'E', 11.998857142857142857142857142857 }, { 'F', 10.999142857142857142857142857143 }, { 'G', 12.998857142857142857142857142857 }, { 'H', 11.998857142857142857142857142857 }, { 'I', 4.9997142857142857142857142857143 }, { 'J', 10.999142857142857142857142857143 }, { 'K', 12.998857142857142857142857142857 },
{ 'L', 10.999142857142857142857142857143 }, { 'M', 14.998571428571428571428571428571 }, { 'N', 10.999142857142857142857142857143 }, { 'O', 12.998857142857142857142857142857 }, { 'P', 11.998857142857142857142857142857 }, { 'Q', 12.998857142857142857142857142857 }, { 'R', 11.998571428571428571428571428571 }, { 'S', 11.998857142857142857142857142857 }, { 'T', 11.998857142857142857142857142857 }, { 'U', 11.998857142857142857142857142857 }, { 'V', 11.998857142857142857142857142857 },
{ 'W', 14.998571428571428571428571428571 }, { 'X', 13.998571428571428571428571428571 }, { 'Y', 10.999142857142857142857142857143 }, { 'Z', 10.999142857142857142857142857143 }, { 'a', 10.999142857142857142857142857143 }, { 'b', 10.999142857142857142857142857143 }, { 'c', 9.9991428571428571428571428571429 }, { 'd', 10.999142857142857142857142857143 }, { 'e', 10.999142857142857142857142857143 }, { 'f', 8.9991428571428571428571428571429 }, { 'g', 10.999142857142857142857142857143 },
{ 'h', 10.999142857142857142857142857143 }, { 'i', 5.9994285714285714285714285714286 }, { 'j', 4.9997142857142857142857142857143 }, { 'k', 9.9991428571428571428571428571429 }, { 'l', 4.9997142857142857142857142857143 }, { 'm', 12.998857142857142857142857142857 }, { 'n', 10.999142857142857142857142857143 }, { 'o', 10.999142857142857142857142857143 }, { 'p', 10.999142857142857142857142857143 }, { 'q', 10.999142857142857142857142857143 }, { 'r', 8.9991428571428571428571428571429 },
{ 's', 10.999142857142857142857142857143 }, { 't', 7.9994285714285714285714285714286 }, { 'u', 10.999142857142857142857142857143 }, { 'v', 10.999142857142857142857142857143 }, { 'w', 13.998571428571428571428571428571 }, { 'x', 10.999142857142857142857142857143 }, { 'y', 10.999142857142857142857142857143 }, { 'z', 9.9991428571428571428571428571429 }, { 'Ä', 14.998571428571428571428571428571 }, { 'Ü', 11.998857142857142857142857142857 }, { 'Ö', 12.998857142857142857142857142857 },
{ 'ä', 10.999142857142857142857142857143 }, { 'ü', 10.999142857142857142857142857143 }, { 'ö', 10.999142857142857142857142857143 }, { 'ß', 11.998857142857142857142857142857 }, { '1', 5.9994285714285714285714285714286 }, { '2', 8.9991428571428571428571428571429 }, { '3', 8.9991428571428571428571428571429 }, { '4', 10.999142857142857142857142857143 }, { '5', 7.9994285714285714285714285714286 }, { '6', 7.9994285714285714285714285714286 }, { '7', 8.9991428571428571428571428571429 },
{ '8', 7.9994285714285714285714285714286 }, { '9', 7.9994285714285714285714285714286 }, { '0', 8.9991428571428571428571428571429 }, { '!', 3.9997142857142857142857142857143 }, { '\"', 6.9994285714285714285714285714286 }, { '§', 7.9994285714285714285714285714286 }, { '$', 7.9994285714285714285714285714286 }, { '%', 10.999142857142857142857142857143 }, { '&', 11.998857142857142857142857142857 }, { '/', 7.9994285714285714285714285714286 }, { '(', 5.9994285714285714285714285714286 },
{ ')', 4.9997142857142857142857142857143 }, { '=', 7.9994285714285714285714285714286 }, { '?', 7.9994285714285714285714285714286 }, { '_', 10.999142857142857142857142857143 }, { '-', 6.9994285714285714285714285714286 }, { '.', 4.9997142857142857142857142857143 }, { ':', 3.9997142857142857142857142857143 }, { ',', 4.9997142857142857142857142857143 }, { ';', 3.9997142857142857142857142857143 }, { '<', 8.9991428571428571428571428571429 }, { '>', 8.9991428571428571428571428571429 },
{ '|', 2.9997142857142857142857142857143 }, { '#', 12.998857142857142857142857142857 }, { '\'', 4.9997142857142857142857142857143 }, { '+', 8.9991428571428571428571428571429 }, { '~', 9.9991428571428571428571428571429 }, { '{', 5.9994285714285714285714285714286 }, { '}', 5.9994285714285714285714285714286 }, { '@', 13.998571428571428571428571428571 }, { ' ', 9.9991428571428571428571428571429 }
};

const std::map<char, float> View::gothicChars = {
{ 'A', 14.99857f }, { 'B', 11.99886f }, { 'C', 10.99886f }, { 'D', 11.99886f }, { 'E', 11.99886f }, { 'F', 10.99914f }, { 'G', 12.99886f }, { 'H', 11.99886f }, { 'I', 4.99971f }, { 'J', 10.99914f }, { 'K', 12.99886f },
{ 'L', 10.99914f }, { 'M', 14.99857f }, { 'N', 10.99914f }, { 'O', 12.99886f }, { 'P', 11.99886f }, { 'Q', 12.99886f }, { 'R', 11.99857f }, { 'S', 11.99886f }, { 'T', 11.99886f }, { 'U', 11.99886f }, { 'V', 11.99886f },
{ 'W', 14.99857f }, { 'X', 13.99857f }, { 'Y', 10.99914f }, { 'Z', 10.99914f }, { 'a', 10.99914f }, { 'b', 10.99914f }, { 'c', 9.99914f }, { 'd', 10.99914f }, { 'e', 10.99914f }, { 'f', 8.99914f }, { 'g', 10.99914f },
{ 'h', 10.99914f }, { 'i', 5.99943f }, { 'j', 4.99971f }, { 'k', 9.99914f }, { 'l', 4.99971f }, { 'm', 12.99886f }, { 'n', 10.99914f }, { 'o', 10.99914f }, { 'p', 10.99914f }, { 'q', 10.99914f }, { 'r', 8.99914f },
{ 's', 10.99914f }, { 't', 7.99943f }, { 'u', 10.99914f }, { 'v', 10.99914f }, { 'w', 13.99857f }, { 'x', 10.99914f }, { 'y', 10.99914f }, { 'z', 9.99914f }, { 'Ä', 14.99857f }, { 'Ü', 11.99886f }, { 'Ö', 12.99886f },
{ 'ä', 10.99914f }, { 'ü', 10.99914f }, { 'ö', 10.99914f }, { 'ß', 11.99886f }, { '1', 5.99943f }, { '2', 8.99914f }, { '3', 8.99914f }, { '4', 10.99914f }, { '5', 7.99943f }, { '6', 7.99943f }, { '7', 8.99914f },
{ '8', 7.99943f }, { '9', 7.99943f }, { '0', 8.99914f }, { '!', 3.99971f }, { '"', 6.99943f }, { '§', 7.99943f }, { '$', 7.99943f }, { '%', 10.99914f }, { '&', 11.99886f }, { '/', 7.99943f }, { '(', 5.99943f },
{ ')', 4.99971f }, { '=', 7.99943f }, { '?', 7.99943f }, { '_', 10.99914f }, { '-', 6.99943f }, { '.', 4.99971f }, { ':', 3.99971f }, { ',', 4.99971f }, { ';', 3.99971f }, { '<', 8.99914f }, { '>', 8.99914f },
{ '|', 2.99971f }, { '#', 12.99886f }, { '\'', 4.99971f }, { '+', 8.99914f }, { '~', 9.99914f }, { '{', 5.99943f }, { '}', 5.99943f }, { '@', 13.99857f }, { ' ', 9.99914f }
};

std::vector<double> View::InitCharWidths()
{
    std::vector<double> buildCharWidths;

    int findMaxKey = 0;

    //Find maximum key.
    for (auto it = allChars.begin(); it != allChars.end(); it++)
    {
        if (findMaxKey < it->first)
            findMaxKey = it->first;
    }
    
    //Fill vector with inital zero elements.
    buildCharWidths.clear();
    buildCharWidths.insert(buildCharWidths.begin(), findMaxKey, 0.0); //Insert findMaxKey 0.0 elements.

    //Fill in correct widths for existent elements.
    for (auto it = allChars.begin(); it != allChars.end(); it++)
    {
        buildCharWidths[it->first] = it->second;
    }

    return buildCharWidths;
}

ViewPoint View::GetScreenSize()
{
    zCView *screen = zCView::GetScreen();
    ViewPoint screenSize;

    screen->GetSize(screenSize.x, screenSize.y);

    if (screenSize.x <= 0 || screenSize.y <= 0) //Invalid screen size ?
    {
        //Try read screen size via ini.
        zCOption *options = zCOption::GetZOptions();
        zCOptionSection *section = options->GetSectionByName("VIDEO", 1);
        screenSize.x = options->GetEntryByName(section, "zVidResFullscreenX", 1)->GetVarValue()->ToInt();
        screenSize.y = options->GetEntryByName(section, "zVidResFullscreenY", 1)->GetVarValue()->ToInt();
    }

    return screenSize;
}

ViewPoint View::PixelToVirtual(int x, int y)
{
    ViewPoint screenSize = GetScreenSize();
    ViewPoint virtualSize;

    virtualSize.x = x * 0x2000 / screenSize.x;
    virtualSize.y = y * 0x2000 / screenSize.y;

    return virtualSize;
}

ViewPoint View::PixelToVirtual(ViewPoint point)
{
    return PixelToVirtual(point.x, point.y);
}

int View::PixelToVirtualX(int x)
{
    ViewPoint screenSize = GetScreenSize();
    int virtualX;

    virtualX = x * 0x2000 / screenSize.x;

    return virtualX;
}

int View::PixelToVirtualY(int y)
{
    ViewPoint screenSize = GetScreenSize();
    int virtualY;

    virtualY = y * 0x2000 / screenSize.y;

    return virtualY;
}

bool View::GothicContainsChar(char c)
{
    if (0 <= c && (size_t) c < charWidths.size())
        return charWidths[c] != 0.0;
    
    return false; //Out of range.
}

double View::StringPixelWidth(const std::string &str)
{
    double width = 0.0;
    
    for (const char &c : str)
    {
        width += OGMPGetCharWidth(c);
    }

    return width;
}
